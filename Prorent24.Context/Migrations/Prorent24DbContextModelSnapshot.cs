// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prorent24.Context;

namespace Prorent24.Context.Migrations
{
    [DbContext(typeof(Prorent24DbContext))]
    partial class Prorent24DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateBlockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockConfigurationJSON");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<bool>("DisplayHeader");

                    b.Property<int>("DocumentTemplateId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("DocumentTemplateId");

                    b.ToTable("sys_document_template_blocks");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CSS");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("FooterText");

                    b.Property<string>("HeaderText");

                    b.Property<string>("Html");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsSystemTemplate")
                        .HasColumnType("BOOLEAN");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("sys_document_templates");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.LetterheadEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BottomMargin");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<bool>("DisplayAtContracts");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<double?>("LeftMargin");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<double?>("PageHeight");

                    b.Property<bool>("PageNumbers");

                    b.Property<int?>("PageSize");

                    b.Property<double?>("PageWidth");

                    b.Property<double?>("RightMargin");

                    b.Property<bool>("ShowAtCrewMemberSlips");

                    b.Property<bool>("ShowAtInvoices");

                    b.Property<bool>("ShowAtOtherSlips");

                    b.Property<bool>("ShowAtQuotations");

                    b.Property<bool>("ShowAtReminders");

                    b.Property<bool>("ShowAtRepairSlips");

                    b.Property<bool>("ShowAtSubhireSlips");

                    b.Property<bool>("ShowAtTransportSlips");

                    b.Property<bool>("ShowOnEquipmentSlips");

                    b.Property<double?>("TopMargin");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_letterheads");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.SalutationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("View");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_salutations");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.AdditionalConditionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_additional_conditions");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.DiscountGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_discount_groups");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.FactorGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_factor_groups");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.FactorGroupOptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("Factor");

                    b.Property<int>("FactorGroupId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("NumberOfDaysFrom");

                    b.Property<int>("NumberOfDaysTo");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FactorGroupId");

                    b.ToTable("sys_factor_group_options");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.InvoiceMomentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AfterAgreement");

                    b.Property<decimal>("Afterwards");

                    b.Property<decimal>("BeforeFirstDay");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_invoice_moments");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.LedgerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingCode")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_ledgers");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.PaymentConditionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingCode");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("PaymentMethodId");

                    b.Property<int>("TermInDays");

                    b.Property<string>("TextOnInvoice");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("sys_payment_conditions");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.PaymentMethodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingCode");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_payment_methods");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.VatClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_vat_classes");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.VatClassSchemeRateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingCode");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("EdifactCode");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("Rate");

                    b.Property<int>("Type");

                    b.Property<int?>("VatClassId");

                    b.Property<int?>("VatSchemeId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("VatClassId");

                    b.HasIndex("VatSchemeId");

                    b.ToTable("sys_vat_class_schemes_rates");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.VatSchemeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_vat_schemes");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Roles.PermissionDirectoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("ModuleType");

                    b.Property<int?>("ParentPermissionId");

                    b.Property<int?>("PermissionField");

                    b.Property<string>("PermissionName");

                    b.Property<int>("ValueTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ParentPermissionId");

                    b.ToTable("sys_permissions");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Roles.RolePermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("PermissionDirectoryId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("PermissionDirectoryId");

                    b.HasIndex("RoleId");

                    b.ToTable("sys_role_permissions");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.ExtraInputFieldEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BelongsTo");

                    b.Property<string>("ChoiceValues");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("DefaultValue");

                    b.Property<int>("EntryFieldType");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<bool>("UseInSearches");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_extra_input_fields");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.PeriodicInspectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("Description");

                    b.Property<int>("FrequencyInterval");

                    b.Property<int>("FrequencyUnitType");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_project_inspections");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.ProjectTemplateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ProgectId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_project_templates");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.ProjectTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<int>("ContractTemplateId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("DefaultAdditionalConditionId");

                    b.Property<int>("InvoiceMommentId");

                    b.Property<int>("InvoiceTemplateId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("LetterheadTemplateId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("PackingSlipTemplateId");

                    b.Property<int>("QuotationTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("ContractTemplateId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("DefaultAdditionalConditionId");

                    b.HasIndex("InvoiceMommentId");

                    b.HasIndex("InvoiceTemplateId");

                    b.HasIndex("LetterheadTemplateId");

                    b.HasIndex("PackingSlipTemplateId");

                    b.HasIndex("QuotationTemplateId");

                    b.ToTable("sys_project_types");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.SystemSettingEntity", b =>
                {
                    b.Property<int>("Type");

                    b.Property<string>("Alias");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LastModifiedUserId");

                    b.Property<string>("Value");

                    b.HasKey("Type");

                    b.HasIndex("LastModifiedUserId");

                    b.ToTable("sys_system_settings");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactElectronicInvoiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("IdentificationNumber");

                    b.Property<string>("IdentificationScheme");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_contact_electronic_invoices");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bank");

                    b.Property<string>("BankAccountNumber");

                    b.Property<string>("Bic");

                    b.Property<int?>("BillingAddressId");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CheckingAccount");

                    b.Property<string>("CocNumber");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyPhonesJson");

                    b.Property<string>("CompanyShortName");

                    b.Property<int?>("CompanyTypeId");

                    b.Property<string>("CorrespondentAccount");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("DatabaseNumber");

                    b.Property<int?>("DefaultContactPersonId");

                    b.Property<string>("Email");

                    b.Property<string>("Email2");

                    b.Property<string>("EmailsJson");

                    b.Property<string>("FirstName");

                    b.Property<string>("FiscalCode");

                    b.Property<int>("FolderId");

                    b.Property<string>("Inn");

                    b.Property<bool?>("IsCompany");

                    b.Property<bool?>("IsPublic");

                    b.Property<string>("Kpp");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NameLine");

                    b.Property<string>("Ogrn");

                    b.Property<string>("Phone");

                    b.Property<string>("Phone2");

                    b.Property<string>("PhonesJson");

                    b.Property<int?>("PostalAddressId");

                    b.Property<string>("ProjNote");

                    b.Property<string>("PurchaseNumber");

                    b.Property<string>("SocialNetworkJson");

                    b.Property<string>("Specialization");

                    b.Property<string>("SubjectProjNote");

                    b.Property<int>("Type");

                    b.Property<string>("VatIdentificationNumber");

                    b.Property<int?>("VisitingAddressId");

                    b.Property<string>("Warning");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("DefaultContactPersonId");

                    b.HasIndex("FolderId");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("VisitingAddressId");

                    b.ToTable("dbo_contacts");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactPaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactId");

                    b.Property<int>("ContactInsurancePercentage");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("CrewDiscount");

                    b.Property<decimal>("DiscountRentalEquipment");

                    b.Property<decimal>("DiscountSaleEquipment");

                    b.Property<decimal>("InsurancePercentage");

                    b.Property<int>("InvoiceMomentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("PaymentConditionId");

                    b.Property<decimal>("Rental");

                    b.Property<decimal>("Sales");

                    b.Property<decimal>("SubhireDiscount");

                    b.Property<decimal>("TotalDiscount");

                    b.Property<decimal>("TransportDiscount");

                    b.Property<int>("VatSchemeId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("InvoiceMomentId");

                    b.HasIndex("PaymentConditionId");

                    b.HasIndex("VatSchemeId");

                    b.ToTable("dbo_contact_payments");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactPersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int>("ContactId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Function");

                    b.Property<string>("HouseNumber");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("Salutation");

                    b.Property<int?>("SalutationId");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_contact_persons");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactVisibilityCrewMemberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactId");

                    b.Property<string>("CrewMemberId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CrewMemberId");

                    b.ToTable("dbo_contact_visibility_crew_members");
                });

            modelBuilder.Entity("Prorent24.Entity.CrewMember.CrewMemberEntity", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<bool>("Active")
                        .HasColumnType("BOOLEAN");

                    b.Property<int?>("AddressId");

                    b.Property<int>("Availability");

                    b.Property<string>("BankAccountNumber");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<string>("CoCNumber");

                    b.Property<string>("ColorAppointments");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime?>("ContractDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int?>("DefaultRateId");

                    b.Property<string>("Description");

                    b.Property<bool>("DisplayInPlanner");

                    b.Property<string>("DrivingLicense");

                    b.Property<string>("EmergencyContact");

                    b.Property<int?>("FolderId");

                    b.Property<int?>("HoursInContract");

                    b.Property<bool>("IsPowerUser")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("PassportCompany");

                    b.Property<DateTime?>("PassportDate");

                    b.Property<string>("PassportNumber");

                    b.Property<string>("ReceiveEmails");

                    b.Property<string>("SocialNetworksJson");

                    b.Property<string>("VAT");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("DefaultRateId");

                    b.HasIndex("FolderId");

                    b.ToTable("dbo_crew_members");
                });

            modelBuilder.Entity("Prorent24.Entity.CrewMember.CrewMemberRateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<decimal>("DailyRate");

                    b.Property<decimal>("HourlyRate");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MaxNumberOfTimeUnit");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("TimeUnit");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.ToTable("dbo_crew_member_rates");
                });

            modelBuilder.Entity("Prorent24.Entity.CrewPlanner.CrewPlannerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Action");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<DateTime>("From")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("Until")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_crew_planners");
                });

            modelBuilder.Entity("Prorent24.Entity.Directory.DirectoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(true);

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("ParentId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_directory");
                });

            modelBuilder.Entity("Prorent24.Entity.Directory.DirectoryLocEntity", b =>
                {
                    b.Property<int>("DirectoryId");

                    b.Property<string>("Lang");

                    b.Property<string>("Name");

                    b.HasKey("DirectoryId", "Lang");

                    b.ToTable("sys_directory_locs");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentAccessoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessoryId");

                    b.Property<bool>("Automatic")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("EquipmentId");

                    b.Property<bool>("Free")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Quantity");

                    b.Property<bool>("SkipIfAlreadyPresent")
                        .HasColumnType("BOOLEAN");

                    b.HasKey("Id");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("dbo_equipment_accessories");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentAlternativeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlternativeId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("EquipmentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("dbo_equipment_alternatives");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentContentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContentId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("EquipmentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Quantity");

                    b.Property<bool>("UnfoldFinancialDocuments")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("UnfoldPackingSlip")
                        .HasColumnType("BOOLEAN");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("dbo_equipment_contents");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Brand");

                    b.Property<string>("Code");

                    b.Property<string>("Colour");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int?>("CriticalStock");

                    b.Property<decimal?>("Current");

                    b.Property<int?>("CurrentUnit");

                    b.Property<int?>("DiscountGroupId");

                    b.Property<bool>("DisplayInPlanner")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("ExternalRemark");

                    b.Property<int?>("FactorGroupId");

                    b.Property<int?>("FolderId");

                    b.Property<decimal?>("Height");

                    b.Property<int?>("HeightUnit");

                    b.Property<string>("InternalRemark");

                    b.Property<int>("KitType");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal?>("Length");

                    b.Property<int?>("LengthUnit");

                    b.Property<string>("LocationInWarehouse");

                    b.Property<bool?>("MaintenanceRequired")
                        .HasColumnType("BOOLEAN");

                    b.Property<decimal?>("MarginPrice");

                    b.Property<string>("MeasuringUnit");

                    b.Property<string>("Model");

                    b.Property<string>("Name");

                    b.Property<decimal?>("NewPrice");

                    b.Property<decimal?>("Power");

                    b.Property<string>("PowerConnector");

                    b.Property<int?>("PowerUnit");

                    b.Property<string>("ProducerCode");

                    b.Property<decimal?>("PurchasePrice");

                    b.Property<int?>("Quantity");

                    b.Property<int>("QuantityMode");

                    b.Property<decimal?>("RentalPrice");

                    b.Property<decimal?>("SalePrice");

                    b.Property<int>("SetType");

                    b.Property<int>("StockManagement");

                    b.Property<string>("Storage");

                    b.Property<decimal?>("SubhirePrice");

                    b.Property<string>("SuppliersInfo");

                    b.Property<int>("SupplyType");

                    b.Property<bool>("SurfaceItem")
                        .HasColumnType("BOOLEAN");

                    b.Property<int>("TransportationType");

                    b.Property<int?>("VATClassId");

                    b.Property<decimal?>("Volume");

                    b.Property<int?>("VolumeUnit");

                    b.Property<decimal?>("Weight");

                    b.Property<int?>("WeightUnit");

                    b.Property<decimal?>("Width");

                    b.Property<int?>("WidthUnit");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("DiscountGroupId");

                    b.HasIndex("FactorGroupId");

                    b.HasIndex("FolderId");

                    b.HasIndex("VATClassId");

                    b.ToTable("dbo_equipments");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentPeriodicInspectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("EquipmentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("PeriodicInspectionId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("PeriodicInspectionId");

                    b.ToTable("dbo_equipment_periodic_inspections");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentQRCodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int?>("EquipmentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("SerialNumberId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SerialNumberId");

                    b.ToTable("dbo_equipment_qr_codes");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentReservedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime>("From")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("ProjectEquipmenId");

                    b.Property<int>("ProjectEquipmentId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("Until")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProjectEquipmenId");

                    b.ToTable("dbo_equipments_reserved");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentSerialNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("BOOLEAN");

                    b.Property<decimal>("BookValue");

                    b.Property<bool>("CalculateBookValueAutomatically")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("DepreciationPerMonth");

                    b.Property<int>("EquipmentId");

                    b.Property<string>("InternalReference");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("PurchasePrice");

                    b.Property<string>("Remark");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("SuppliersInfo");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("dbo_equipment_serial_numbers");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentStockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<string>("Description");

                    b.Property<string>("Details");

                    b.Property<int>("EquipmentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("dbo_equipment_stocks");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentSupplierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("Details");

                    b.Property<int>("EquipmentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("dbo_equipment_suppliers");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentWebShopEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("EquipmentId");

                    b.Property<bool>("FeaturedProduct")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("InWebshop")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LongDescription");

                    b.Property<string>("SEODescription");

                    b.Property<string>("SEOKeyword");

                    b.Property<string>("SEOTitle");

                    b.Property<string>("ShortDescription");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("dbo_equipment_webshop");
                });

            modelBuilder.Entity("Prorent24.Entity.General.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalAddress");

                    b.Property<string>("Address");

                    b.Property<long?>("Alt");

                    b.Property<string>("City");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("Lat");

                    b.Property<long?>("Long");

                    b.Property<string>("Number");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Region");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_addresses");
                });

            modelBuilder.Entity("Prorent24.Entity.General.DocumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BelongsTo");

                    b.Property<bool>("Confidential");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("DocumentType");

                    b.Property<int?>("FileId");

                    b.Property<string>("FileName");

                    b.Property<string>("GeneratedById");

                    b.Property<DateTime?>("GeneratedOn");

                    b.Property<int?>("InvoiceId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("LetterheadId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("OpenKitsAndCases");

                    b.Property<string>("Path");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Subject");

                    b.Property<int?>("TemplateId");

                    b.Property<string>("Text");

                    b.Property<bool>("UseLetterhead");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FileId");

                    b.HasIndex("GeneratedById");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("LetterheadId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TemplateId");

                    b.ToTable("dbo_documents");
                });

            modelBuilder.Entity("Prorent24.Entity.General.FileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BelongsTo");

                    b.Property<bool>("Confidential");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<string>("Description");

                    b.Property<int?>("EquipmentId");

                    b.Property<int?>("InspectionId");

                    b.Property<int?>("InvoiceEntityId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("RepairId");

                    b.Property<int?>("SubhireId");

                    b.Property<int?>("TaskId");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("InvoiceEntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepairId");

                    b.HasIndex("SubhireId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_files");
                });

            modelBuilder.Entity("Prorent24.Entity.General.FolderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ModuleType");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("dbo_folders");
                });

            modelBuilder.Entity("Prorent24.Entity.General.NoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BelongsTo");

                    b.Property<int>("Confidential");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<int?>("EquipmentId");

                    b.Property<int?>("InspectionId");

                    b.Property<int?>("InvoiceEntityId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("RepairId");

                    b.Property<int?>("SubhireId");

                    b.Property<int?>("TaskId");

                    b.Property<string>("Text");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("InvoiceEntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepairId");

                    b.HasIndex("SubhireId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_notes");
                });

            modelBuilder.Entity("Prorent24.Entity.General.PresetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("Filters");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ModuleType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_presets");
                });

            modelBuilder.Entity("Prorent24.Entity.General.SavedFilterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("FilterGroupType");

                    b.Property<int>("FilterType");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ModuleType");

                    b.Property<string>("Text");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_saved_filters");
                });

            modelBuilder.Entity("Prorent24.Entity.General.TagBondEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<int?>("EquipmentId");

                    b.Property<int?>("InspectionId");

                    b.Property<int?>("InvoiceId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("RepairId");

                    b.Property<int?>("SubhireId");

                    b.Property<int>("TagDirectoryId");

                    b.Property<int?>("TaskId");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepairId");

                    b.HasIndex("SubhireId");

                    b.HasIndex("TagDirectoryId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_tag_bonds");
                });

            modelBuilder.Entity("Prorent24.Entity.General.TagDirectoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BelongsTo");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LowerName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_tag_direcories");
                });

            modelBuilder.Entity("Prorent24.Entity.General.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BelongsTo");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<int?>("EquipmentId");

                    b.Property<int?>("InspectionId");

                    b.Property<int?>("InvoiceEntityId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("RepairId");

                    b.Property<int?>("SubhireId");

                    b.Property<int?>("TaskId");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("InvoiceEntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepairId");

                    b.HasIndex("SubhireId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_tags");
                });

            modelBuilder.Entity("Prorent24.Entity.General.UserColumnEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Column");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("Entity");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Order");

                    b.Property<bool>("ShowColumn");

                    b.Property<double>("WidthColumn");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_user_columns");
                });

            modelBuilder.Entity("Prorent24.Entity.Identity.UserRoleEntity", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountingCode");

                    b.Property<int?>("ClientId");

                    b.Property<int?>("ContactPersonId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal?>("CreditDebit");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("FileName");

                    b.Property<DateTime?>("GeneratedOn")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int?>("OpenKitsAndCases");

                    b.Property<string>("OwnerId");

                    b.Property<int?>("PaymentConditionId");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("PaymentMethodId");

                    b.Property<decimal?>("PercentagePartialInvoice");

                    b.Property<bool>("PriceCalculationBasedOnProject")
                        .HasColumnType("BOOLEAN");

                    b.Property<decimal?>("PriceExcludeVAT");

                    b.Property<decimal?>("PriceIncludeVAT");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime?>("SendAT")
                        .HasColumnType("DATETIME");

                    b.Property<decimal?>("TotalNewPrice");

                    b.Property<decimal?>("TotalPower");

                    b.Property<decimal?>("TotalPowerConsumption");

                    b.Property<decimal?>("TotalSeparateInvoiceLines");

                    b.Property<decimal?>("TotalVolume");

                    b.Property<decimal?>("TotalWeight");

                    b.Property<decimal?>("VAT");

                    b.Property<int?>("VatSchemeId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PaymentConditionId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VatSchemeId");

                    b.ToTable("dbo_invoices");
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceExcludedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("InvoiceExcludedId");

                    b.Property<int?>("InvoiceExludedId");

                    b.Property<int>("InvoiceId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("InvoiceExludedId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("dbo_invoice_excluded");
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceLineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("Description");

                    b.Property<int>("InvoiceId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("LedgerId");

                    b.Property<decimal>("Price");

                    b.Property<int>("VatClassId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LedgerId");

                    b.HasIndex("VatClassId");

                    b.ToTable("dbo_invoice_lines");
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceRequestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime>("InvoiceAt")
                        .HasColumnType("BOOLEAN");

                    b.Property<int?>("InvoiceId");

                    b.Property<bool>("IsInvoiceAfterwards")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsInvoiceInAdvance")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsIvoiceAfterConfirmation")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfInvoices");

                    b.Property<decimal?>("Percentage");

                    b.Property<decimal?>("PreviouslyBilled");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbo_invoice_requests");
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.InspectEqupmentRequestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime>("InspectionDate");

                    b.Property<int>("InspectionId");

                    b.Property<DateTime?>("LastInspectedAt");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("SerialNumberId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("SerialNumberId");

                    b.ToTable("dbo_inspect_equipment_requests");
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.InspectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("PeriodicInspectionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("PeriodicInspectionId");

                    b.ToTable("dbo_inspections");
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.InspectionSerialNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("EquipmentId");

                    b.Property<int>("InspectionId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SerialNumberId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("SerialNumberId");

                    b.ToTable("dbo_inspection_serial_numbers");
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.RepairEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignToId");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("EquipmentId");

                    b.Property<int?>("ExternalRepairId");

                    b.Property<DateTime?>("From")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<string>("ReportedById");

                    b.Property<int?>("SerialNumberId");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Usable");

                    b.HasKey("Id");

                    b.HasIndex("AssignToId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ExternalRepairId");

                    b.HasIndex("ReportedById");

                    b.HasIndex("SerialNumberId");

                    b.ToTable("dbo_repairs");
                });

            modelBuilder.Entity("Prorent24.Entity.MigarionDataBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Executed");

                    b.Property<string>("MigrationData");

                    b.Property<string>("MigrationName");

                    b.HasKey("Id");

                    b.ToTable("sys_migration_database");
                });

            modelBuilder.Entity("Prorent24.Entity.ModuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ModuleType");

                    b.Property<string>("Name");

                    b.Property<short>("Order");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("sys_modules");
                });

            modelBuilder.Entity("Prorent24.Entity.Notification.NotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Message");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("RepairId");

                    b.Property<int?>("TaskId");

                    b.Property<string>("Theme");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepairId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("dbo_notifications");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectAdditionalCostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("Details");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<decimal>("PurchasePrice");

                    b.Property<decimal>("SalePrice");

                    b.Property<int>("VatClassId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VatClassId");

                    b.ToTable("dbo_project_additional_costs");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountManagerId");

                    b.Property<int?>("ClientContactId");

                    b.Property<int?>("ClientContactPersonId");

                    b.Property<string>("Color");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsPublic");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("LocationContactId");

                    b.Property<int?>("LocationContactPersonId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Reference");

                    b.Property<int>("Status");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("ClientContactId");

                    b.HasIndex("ClientContactPersonId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LocationContactId");

                    b.HasIndex("LocationContactPersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("dbo_projects");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("Discount");

                    b.Property<int?>("EquipmentId");

                    b.Property<decimal>("Factor");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProjectEquipmentGroupId");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<decimal>("TotalPrice");

                    b.Property<int?>("VatClassId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectEquipmentGroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VatClassId");

                    b.ToTable("dbo_project_equipments");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEquipmentGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("EndPlanPeriod")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("EndUsePeriod")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("StartPlanPeriod")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("StartUsePeriod")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbo_project_equipment_groups");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEquipmentMovementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int?>("EquipmentId");

                    b.Property<int>("GroupId");

                    b.Property<bool?>("IsRemoved");

                    b.Property<int?>("KitCaseEquipmentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MovementStatus");

                    b.Property<int?>("ProjectEquipmentId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("SelectedQuantity");

                    b.Property<int>("TotalQuantity");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("KitCaseEquipmentId");

                    b.HasIndex("ProjectEquipmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbo_project_equipment_movement");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFinancialCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualCosts");

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("Discount");

                    b.Property<int?>("EquipmentGroupId");

                    b.Property<decimal>("EstimatedCosts");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<decimal>("PlannedCosts");

                    b.Property<decimal>("Profit");

                    b.Property<int>("ProjectId");

                    b.Property<decimal>("Revenue");

                    b.Property<decimal>("Total");

                    b.Property<decimal?>("TotalIncVat");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentGroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbo_project_financial_categories");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFinancialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdditionalConditionId");

                    b.Property<string>("AddittionalConditionFreeText");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("Deposit");

                    b.Property<int>("DepositStatus");

                    b.Property<int?>("InvoiceMomentId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ProjectId");

                    b.Property<decimal>("TotalIncVat");

                    b.Property<int>("VatSchemeId");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalConditionId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("InvoiceMomentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VatSchemeId");

                    b.ToTable("dbo_project_financials");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFunctionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BreakInMinutes");

                    b.Property<int>("BreakType");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberRemark");

                    b.Property<string>("CustomerRemark");

                    b.Property<decimal?>("Distance");

                    b.Property<int>("DurationInMinutes");

                    b.Property<int>("DurationType");

                    b.Property<string>("ExternalName");

                    b.Property<int>("GlobalAddTimeType");

                    b.Property<bool>("IncludeInPrice")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("InternalName");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("ParentFunctionId");

                    b.Property<DateTime?>("PlanFrom")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("PlanFromTimeType");

                    b.Property<DateTime?>("PlanUntil")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("PlanUntilTimeType");

                    b.Property<string>("PlannerRemark");

                    b.Property<int?>("ProjectFunctionGroupId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("Quantity");

                    b.Property<decimal>("RentalFixed")
                        .HasColumnType("DECIMAL");

                    b.Property<decimal>("RentalHourRate")
                        .HasColumnType("DECIMAL");

                    b.Property<bool>("ShowInPlaner")
                        .HasColumnType("BOOLEAN");

                    b.Property<decimal>("SubhireFixed")
                        .HasColumnType("DECIMAL");

                    b.Property<decimal>("SubhireHourRate")
                        .HasColumnType("DECIMAL");

                    b.Property<bool>("TakeTimeFromLocation");

                    b.Property<int>("TimeAfterInMinutes");

                    b.Property<int>("TimeAfterType");

                    b.Property<int>("TimeBeforeInMinutes");

                    b.Property<int>("TimeBeforeType");

                    b.Property<int?>("TimeFrameId");

                    b.Property<decimal>("TotalCosts");

                    b.Property<decimal>("TotalPrice");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UseFrom")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("UseFromTimeType");

                    b.Property<DateTime?>("UseUntil")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("UseUntilTimeType");

                    b.Property<int?>("VatClassId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ParentFunctionId");

                    b.HasIndex("ProjectFunctionGroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimeFrameId");

                    b.HasIndex("VatClassId");

                    b.ToTable("dbo_project_functions");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFunctionGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("Duration");

                    b.Property<int>("DurationInMinutes");

                    b.Property<int>("DurationType");

                    b.Property<int>("GlobalAddTimeType");

                    b.Property<bool>("IsDuration");

                    b.Property<bool>("IsPlanningPeriodDefined")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsUsagePeriodDefined")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("PlanFrom")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("PlanUntil")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("SubprojectId");

                    b.Property<bool>("UsageBeginsAtBeginningPlanPeriod")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("UsageBeginsAtBeginningUsePeriod")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("UsageEndsAtEndiingPlanPeriod")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("UsageEndsAtEndingUsePeriod")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime?>("UseFrom")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UseUntil")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("dbo_project_function_groups");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectPlanningEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("ActualCosts");

                    b.Property<decimal?>("Costs");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal?>("CrewMemberHourlyRate");

                    b.Property<string>("CrewMemberId");

                    b.Property<int?>("CrewMemberRateId");

                    b.Property<int>("FunctionId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("PlanFrom")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("PlanUntil")
                        .HasColumnType("DATETIME");

                    b.Property<decimal?>("PlannedCosts");

                    b.Property<bool?>("ProjectLeader");

                    b.Property<int?>("RateType");

                    b.Property<string>("Remark");

                    b.Property<int>("TransportType");

                    b.Property<int?>("VehicleId");

                    b.Property<bool>("VisibleToCrewMember");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("CrewMemberRateId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_project_plannings");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectTimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<bool>("DefaultPlanPeriod");

                    b.Property<bool>("DefaultUsagePeriod");

                    b.Property<bool>("DisplayContract");

                    b.Property<bool>("DisplayPackSlip");

                    b.Property<bool>("DisplayQuotation");

                    b.Property<DateTime>("From")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("Until")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbo_project_times");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectVisibilityCrewMemberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CrewMemberId");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("ProjectId");

                    b.ToTable("dbo_project_visibility_crew_members");
                });

            modelBuilder.Entity("Prorent24.Entity.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("IsDefault")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<decimal?>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountManagerId");

                    b.Property<decimal>("AdditionalCost");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("DeliveryCollectionEnd")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DeliveryCollectionStart")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("EquipmentCost");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("LocationContactId");

                    b.Property<int?>("LocationContactPersonId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PlanningPeriodEnd")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("PlanningPeriodStart")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Reference");

                    b.Property<string>("Remark");

                    b.Property<int>("Status");

                    b.Property<int?>("SupplierContactId");

                    b.Property<int?>("SupplierContactPersonId");

                    b.Property<decimal>("TotalCost");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UsagePeriodEnd")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UsagePeriodStart")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LocationContactId");

                    b.HasIndex("LocationContactPersonId");

                    b.HasIndex("SupplierContactId");

                    b.HasIndex("SupplierContactPersonId");

                    b.ToTable("dbo_subhires");
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireEquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("Discount");

                    b.Property<int>("EquipmentId");

                    b.Property<decimal>("Factor");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<decimal>("Price");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<int>("SubhireEquipmentGroupId");

                    b.Property<int?>("SubhireId");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SubhireEquipmentGroupId");

                    b.HasIndex("SubhireId");

                    b.ToTable("dbo_subhire_equipments");
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireEquipmentGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("SubhireId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("SubhireId");

                    b.ToTable("dbo_subhire_equipment_groups");
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ProjectId");

                    b.Property<int>("SubhireId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubhireId");

                    b.ToTable("dbo_subhire_projects");
                });

            modelBuilder.Entity("Prorent24.Entity.Tasks.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignTo");

                    b.Property<int>("BelongsTo");

                    b.Property<string>("CompleatedBy");

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<DateTime>("DeadLine");

                    b.Property<string>("Description");

                    b.Property<int?>("EquipmentId");

                    b.Property<int?>("InspectionId");

                    b.Property<int?>("InvoiceEntityId");

                    b.Property<bool>("IsPublic");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("RepairId");

                    b.Property<int?>("SubhireId");

                    b.Property<string>("Task");

                    b.Property<int?>("TaskEntityId");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("AssignTo");

                    b.HasIndex("CompleatedBy");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("InvoiceEntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RepairId");

                    b.HasIndex("SubhireId");

                    b.HasIndex("TaskEntityId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_tasks");
                });

            modelBuilder.Entity("Prorent24.Entity.Tasks.TaskExecutorCrewMemberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CrewMemberId");

                    b.Property<int>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("TaskId");

                    b.ToTable("dbo_task_executor_crew_members");
                });

            modelBuilder.Entity("Prorent24.Entity.Tasks.TaskVisibilityCrewMemberEntity", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("CrewMemberId");

                    b.HasKey("TaskId", "CrewMemberId");

                    b.HasIndex("CrewMemberId");

                    b.ToTable("dbo_task_visibility_crew_members");
                });

            modelBuilder.Entity("Prorent24.Entity.TimeRegistration.TimeRegistrationActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<int>("Duration");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name");

                    b.Property<int>("TimeRegistrationId");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("TimeRegistrationId");

                    b.ToTable("dbo_time_registration_activities");
                });

            modelBuilder.Entity("Prorent24.Entity.TimeRegistration.TimeRegistrationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BreakDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BreakTimeUnit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<string>("CrewMemberId");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("DECIMAL");

                    b.Property<DateTime>("From")
                        .HasColumnType("DATETIME");

                    b.Property<int>("HourRegistrationType");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("Lunch")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.Property<int>("TravelDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TravelTimeUnit");

                    b.Property<DateTime>("Until")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("CrewMemberId");

                    b.ToTable("dbo_time_registrations");
                });

            modelBuilder.Entity("Prorent24.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool?>("IsSystemUser");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Prorent24.Entity.Vehicle.VehicleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CreationUserId");

                    b.Property<decimal>("DayilCosts")
                        .HasColumnType("DECIMAL");

                    b.Property<bool>("DeployedMultipleTimesSimultaneously")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Description");

                    b.Property<bool>("DisplayInPlanner")
                        .HasColumnType("BOOLEAN");

                    b.Property<int>("FolderId");

                    b.Property<decimal>("Height")
                        .HasColumnType("DECIMAL");

                    b.Property<int?>("HeightUnit");

                    b.Property<DateTime?>("InsuranceDate")
                        .HasColumnType("DATE");

                    b.Property<bool?>("IsPublic");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("Length")
                        .HasColumnType("DECIMAL");

                    b.Property<int?>("LengthUnit");

                    b.Property<decimal>("LoadCapacity")
                        .HasColumnType("DECIMAL");

                    b.Property<int?>("LoadCapacityUnit");

                    b.Property<string>("LoadingSurface");

                    b.Property<DateTime?>("MOTDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Name");

                    b.Property<string>("RegistrationNumber");

                    b.Property<int>("Seats");

                    b.Property<decimal>("VariableCosts")
                        .HasColumnType("DECIMAL");

                    b.Property<decimal>("Width")
                        .HasColumnType("DECIMAL");

                    b.Property<int?>("WidthUnit");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FolderId");

                    b.ToTable("dbo_vehicles");
                });

            modelBuilder.Entity("Prorent24.Entity.Vehicle.VehicleVisibilityCrewMemberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CrewMemberId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("VehicleId");

                    b.ToTable("dbo_vehicle_visibility_crew_members");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Prorent24.Entity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Prorent24.Entity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Prorent24.Entity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Prorent24.Entity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateBlockEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", "DocumentTemplate")
                        .WithMany("Blocks")
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Directory.DirectoryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Directory.DirectoryEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.LetterheadEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.CustomerCommunication.SalutationEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.AdditionalConditionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.DiscountGroupEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.FactorGroupEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.FactorGroupOptionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.FactorGroupEntity", "FactorGroup")
                        .WithMany("FactorGroupOptions")
                        .HasForeignKey("FactorGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.InvoiceMomentEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.LedgerEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.PaymentConditionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.PaymentMethodEntity", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.PaymentMethodEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.VatClassEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.VatClassSchemeRateEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatClassEntity", "VatClass")
                        .WithMany("VatClassSchemeRates")
                        .HasForeignKey("VatClassId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatSchemeEntity", "VatScheme")
                        .WithMany("VatClassSchemeRates")
                        .HasForeignKey("VatSchemeId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Financial.VatSchemeEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Roles.PermissionDirectoryEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Roles.PermissionDirectoryEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentPermissionId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Roles.RolePermissionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Roles.PermissionDirectoryEntity", "PermissionDirectory")
                        .WithMany()
                        .HasForeignKey("PermissionDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.ExtraInputFieldEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.PeriodicInspectionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.ProjectTemplateEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.Settings.ProjectTypeEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", "ContractTemplate")
                        .WithMany()
                        .HasForeignKey("ContractTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.AdditionalConditionEntity", "DefaultAdditionalCondition")
                        .WithMany()
                        .HasForeignKey("DefaultAdditionalConditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Financial.InvoiceMomentEntity", "InvoiceMoment")
                        .WithMany()
                        .HasForeignKey("InvoiceMommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", "InvoiceTemplate")
                        .WithMany()
                        .HasForeignKey("InvoiceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.LetterheadEntity", "LetterheadTemplate")
                        .WithMany()
                        .HasForeignKey("LetterheadTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", "PackingSlip")
                        .WithMany()
                        .HasForeignKey("PackingSlipTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", "QuotationTemplate")
                        .WithMany()
                        .HasForeignKey("QuotationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Configuration.SystemSettingEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "LastModifiedUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactElectronicInvoiceEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.General.AddressEntity", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Contact.ContactPersonEntity", "DefaultContact")
                        .WithMany()
                        .HasForeignKey("DefaultContactPersonId");

                    b.HasOne("Prorent24.Entity.General.FolderEntity", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.General.AddressEntity", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.HasOne("Prorent24.Entity.General.AddressEntity", "VisitingAddress")
                        .WithMany()
                        .HasForeignKey("VisitingAddressId");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactPaymentEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.InvoiceMomentEntity", "InvoiceMoment")
                        .WithMany()
                        .HasForeignKey("InvoiceMomentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Financial.PaymentConditionEntity", "PaymentCondition")
                        .WithMany()
                        .HasForeignKey("PaymentConditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatSchemeEntity", "VatScheme")
                        .WithMany()
                        .HasForeignKey("VatSchemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactPersonEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithOne()
                        .HasForeignKey("Prorent24.Entity.Contact.ContactPersonEntity", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Contact.ContactVisibilityCrewMemberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany("CrewMembers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");
                });

            modelBuilder.Entity("Prorent24.Entity.CrewMember.CrewMemberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.General.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberRateEntity", "DefaultRate")
                        .WithMany()
                        .HasForeignKey("DefaultRateId");

                    b.HasOne("Prorent24.Entity.General.FolderEntity", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("Prorent24.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.CrewMember.CrewMemberRateEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");
                });

            modelBuilder.Entity("Prorent24.Entity.CrewPlanner.CrewPlannerEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Prorent24.Entity.Directory.DirectoryEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Directory.DirectoryLocEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Directory.DirectoryEntity", "Directory")
                        .WithMany("Locs")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentAccessoryEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Accessory")
                        .WithMany()
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("EquipmentAccessories")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentAlternativeEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Alternative")
                        .WithMany()
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("EquipmentAlternatives")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentContentEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("EquipmentContents")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.DiscountGroupEntity", "DiscountGroup")
                        .WithMany()
                        .HasForeignKey("DiscountGroupId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.FactorGroupEntity", "FactorGroup")
                        .WithMany()
                        .HasForeignKey("FactorGroupId");

                    b.HasOne("Prorent24.Entity.General.FolderEntity", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatClassEntity", "VatClass")
                        .WithMany()
                        .HasForeignKey("VATClassId");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentPeriodicInspectionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("EquipmentPeriodicInspections")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Settings.PeriodicInspectionEntity", "PeriodicInspection")
                        .WithMany()
                        .HasForeignKey("PeriodicInspectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentQRCodeEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentSerialNumberEntity", "SerialNumber")
                        .WithMany()
                        .HasForeignKey("SerialNumberId");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentReservedEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEquipmentEntity", "ProjectEquipmentEntity")
                        .WithMany()
                        .HasForeignKey("ProjectEquipmenId");
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentSerialNumberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("EquipmentSerialNumbers")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentStockEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("EquipmentStock")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentSupplierEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Equipment.EquipmentWebShopEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.General.AddressEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.DocumentEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.General.FileEntity", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Prorent24.Entity.User", "GenerationBy")
                        .WithMany()
                        .HasForeignKey("GeneratedById");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithOne("Document")
                        .HasForeignKey("Prorent24.Entity.General.DocumentEntity", "InvoiceId");

                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.LetterheadEntity", "Letterhead")
                        .WithMany()
                        .HasForeignKey("LetterheadId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Configuration.CustomerCommunication.DocumentTemplateEntity", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.FileEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany("Files")
                        .HasForeignKey("ContactId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMembers")
                        .WithMany("Files")
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("Files")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Maintenance.InspectionEntity", "Inspection")
                        .WithMany("Files")
                        .HasForeignKey("InspectionId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany("Files")
                        .HasForeignKey("InvoiceEntityId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany("Files")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Maintenance.RepairEntity", "Repair")
                        .WithMany("Files")
                        .HasForeignKey("RepairId");

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany("Files")
                        .HasForeignKey("SubhireId");

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity", "Task")
                        .WithMany("Files")
                        .HasForeignKey("TaskId");

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany("Files")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.FolderEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.General.FolderEntity")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.NoteEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany("Notes")
                        .HasForeignKey("ContactId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMembers")
                        .WithMany("Notes")
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("Notes")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Maintenance.InspectionEntity", "Inspection")
                        .WithMany("Notes")
                        .HasForeignKey("InspectionId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany("Notes")
                        .HasForeignKey("InvoiceEntityId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Maintenance.RepairEntity", "Repair")
                        .WithMany("Notes")
                        .HasForeignKey("RepairId");

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany("Notes")
                        .HasForeignKey("SubhireId");

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity", "Task")
                        .WithMany("Notes")
                        .HasForeignKey("TaskId");

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany("Notes")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.PresetEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.SavedFilterEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.TagBondEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMembers")
                        .WithMany("Tags")
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("Tags")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Maintenance.InspectionEntity", "Inspection")
                        .WithMany("Tags")
                        .HasForeignKey("InspectionId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany("Tags")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany("Tags")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Maintenance.RepairEntity", "Repair")
                        .WithMany("Tags")
                        .HasForeignKey("RepairId");

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany("Tags")
                        .HasForeignKey("SubhireId");

                    b.HasOne("Prorent24.Entity.General.TagDirectoryEntity", "TagDirectory")
                        .WithMany()
                        .HasForeignKey("TagDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity", "Task")
                        .WithMany("Tags")
                        .HasForeignKey("TaskId");

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany("Tags")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.TagDirectoryEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.TagEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMembers")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Maintenance.InspectionEntity", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceEntityId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Maintenance.RepairEntity", "Repair")
                        .WithMany()
                        .HasForeignKey("RepairId");

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany()
                        .HasForeignKey("SubhireId");

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity", "Tag")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Prorent24.Entity.General.UserColumnEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Identity.UserRoleEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Prorent24.Entity.Contact.ContactPersonEntity", "ContactPerson")
                        .WithMany()
                        .HasForeignKey("ContactPersonId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.PaymentConditionEntity", "PaymentCondition")
                        .WithMany()
                        .HasForeignKey("PaymentConditionId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.PaymentMethodEntity", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatSchemeEntity", "VatScheme")
                        .WithMany()
                        .HasForeignKey("VatSchemeId");
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceExcludedEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "InvoiceExluded")
                        .WithMany()
                        .HasForeignKey("InvoiceExludedId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceLineEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Financial.LedgerEntity", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatClassEntity", "VatClass")
                        .WithMany()
                        .HasForeignKey("VatClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Invoice.InvoiceRequestEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.InspectEqupmentRequestEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Settings.PeriodicInspectionEntity", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentSerialNumberEntity", "SerialNumber")
                        .WithMany()
                        .HasForeignKey("SerialNumberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.InspectionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Settings.PeriodicInspectionEntity", "PeriodicInspection")
                        .WithMany()
                        .HasForeignKey("PeriodicInspectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.InspectionSerialNumberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Maintenance.InspectionEntity", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentSerialNumberEntity", "SerialNumber")
                        .WithMany()
                        .HasForeignKey("SerialNumberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Maintenance.RepairEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "AssignTo")
                        .WithMany()
                        .HasForeignKey("AssignToId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "ExternalRepair")
                        .WithMany()
                        .HasForeignKey("ExternalRepairId");

                    b.HasOne("Prorent24.Entity.User", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentSerialNumberEntity", "SerialNumber")
                        .WithMany()
                        .HasForeignKey("SerialNumberId");
                });

            modelBuilder.Entity("Prorent24.Entity.ModuleEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Notification.NotificationEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Maintenance.RepairEntity", "Repair")
                        .WithMany()
                        .HasForeignKey("RepairId");

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("Prorent24.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectAdditionalCostEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatClassEntity", "VatClass")
                        .WithMany()
                        .HasForeignKey("VatClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMember")
                        .WithMany()
                        .HasForeignKey("AccountManagerId");

                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "ClientContact")
                        .WithMany()
                        .HasForeignKey("ClientContactId");

                    b.HasOne("Prorent24.Entity.Contact.ContactPersonEntity", "ClientContactPerson")
                        .WithMany()
                        .HasForeignKey("ClientContactPersonId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "LocationContact")
                        .WithMany()
                        .HasForeignKey("LocationContactId");

                    b.HasOne("Prorent24.Entity.Contact.ContactPersonEntity", "LocationContactPerson")
                        .WithMany()
                        .HasForeignKey("LocationContactPersonId");

                    b.HasOne("Prorent24.Entity.Configuration.Settings.ProjectTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEquipmentEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("ProjectEquipments")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEquipmentEntity", "ParentProjectEquipment")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEquipmentGroupEntity", "ProjectEquipmentGroup")
                        .WithMany("Equipments")
                        .HasForeignKey("ProjectEquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatClassEntity", "VatClass")
                        .WithMany()
                        .HasForeignKey("VatClassId");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEquipmentGroupEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectEquipmentMovementEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEquipmentGroupEntity", "ProjectEquipmentGroup")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Project.ProjectEquipmentMovementEntity")
                        .WithMany("KitCaseEquipments")
                        .HasForeignKey("KitCaseEquipmentId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEquipmentEntity", "ProjectEquipment")
                        .WithMany()
                        .HasForeignKey("ProjectEquipmentId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFinancialCategoryEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEquipmentGroupEntity", "EquipmentGroup")
                        .WithMany()
                        .HasForeignKey("EquipmentGroupId");

                    b.HasOne("Prorent24.Entity.Project.ProjectFinancialCategoryEntity", "ParentFinancialCategory")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFinancialEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.Configuration.Financial.AdditionalConditionEntity", "AdditionalCondition")
                        .WithMany()
                        .HasForeignKey("AdditionalConditionId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.InvoiceMomentEntity", "InvoiceMoment")
                        .WithMany()
                        .HasForeignKey("InvoiceMomentId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatSchemeEntity", "VatScheme")
                        .WithMany()
                        .HasForeignKey("VatSchemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFunctionEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectFunctionEntity", "ParentFunction")
                        .WithMany()
                        .HasForeignKey("ParentFunctionId");

                    b.HasOne("Prorent24.Entity.Project.ProjectFunctionGroupEntity", "ProjectFunctionGroup")
                        .WithMany()
                        .HasForeignKey("ProjectFunctionGroupId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Project.ProjectTimeEntity", "ProjectTime")
                        .WithMany()
                        .HasForeignKey("TimeFrameId");

                    b.HasOne("Prorent24.Entity.Configuration.Financial.VatClassEntity", "VatClass")
                        .WithMany()
                        .HasForeignKey("VatClassId");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectFunctionGroupEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectPlanningEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberRateEntity", "CrewMemberRate")
                        .WithMany()
                        .HasForeignKey("CrewMemberRateId");

                    b.HasOne("Prorent24.Entity.Project.ProjectFunctionEntity", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectTimeEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany("Times")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Project.ProjectVisibilityCrewMemberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany("CrewMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "AccountManager")
                        .WithMany()
                        .HasForeignKey("AccountManagerId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "LocationContact")
                        .WithMany()
                        .HasForeignKey("LocationContactId");

                    b.HasOne("Prorent24.Entity.Contact.ContactPersonEntity", "LocationContactPerson")
                        .WithMany()
                        .HasForeignKey("LocationContactPersonId");

                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "SupplierContact")
                        .WithMany()
                        .HasForeignKey("SupplierContactId");

                    b.HasOne("Prorent24.Entity.Contact.ContactPersonEntity", "SupplierContactPerson")
                        .WithMany()
                        .HasForeignKey("SupplierContactPersonId");
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireEquipmentEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEquipmentEntity", "ParentSubhireEquipment")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEquipmentGroupEntity", "SubhireEquipmentGroup")
                        .WithMany("Equipments")
                        .HasForeignKey("SubhireEquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany()
                        .HasForeignKey("SubhireId");
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireEquipmentGroupEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany()
                        .HasForeignKey("SubhireId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Subhire.SubhireProjectEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany("Projects")
                        .HasForeignKey("SubhireId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Tasks.TaskEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "AssignToMember")
                        .WithMany()
                        .HasForeignKey("AssignTo");

                    b.HasOne("Prorent24.Entity.User", "CompleatedByMember")
                        .WithMany()
                        .HasForeignKey("CompleatedBy");

                    b.HasOne("Prorent24.Entity.Contact.ContactEntity", "Contact")
                        .WithMany("Tasks")
                        .HasForeignKey("ContactId");

                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMember")
                        .WithMany("Tasks")
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("Tasks")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Prorent24.Entity.Maintenance.InspectionEntity", "Inspection")
                        .WithMany("Tasks")
                        .HasForeignKey("InspectionId");

                    b.HasOne("Prorent24.Entity.Invoice.InvoiceEntity", "Invoice")
                        .WithMany("Tasks")
                        .HasForeignKey("InvoiceEntityId");

                    b.HasOne("Prorent24.Entity.Project.ProjectEntity", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Prorent24.Entity.Maintenance.RepairEntity", "Repair")
                        .WithMany("Tasks")
                        .HasForeignKey("RepairId");

                    b.HasOne("Prorent24.Entity.Subhire.SubhireEntity", "Subhire")
                        .WithMany("Tasks")
                        .HasForeignKey("SubhireId");

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskEntityId");

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany("Tasks")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Prorent24.Entity.Tasks.TaskExecutorCrewMemberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity", "Task")
                        .WithMany("Executors")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Tasks.TaskVisibilityCrewMemberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Prorent24.Entity.Tasks.TaskEntity", "Task")
                        .WithMany("CrewMembers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.TimeRegistration.TimeRegistrationActivityEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.TimeRegistration.TimeRegistrationEntity", "TimeRegistration")
                        .WithMany("Activities")
                        .HasForeignKey("TimeRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.TimeRegistration.TimeRegistrationEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.CrewMember.CrewMemberEntity", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");
                });

            modelBuilder.Entity("Prorent24.Entity.Vehicle.VehicleEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Prorent24.Entity.General.FolderEntity", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Prorent24.Entity.Vehicle.VehicleVisibilityCrewMemberEntity", b =>
                {
                    b.HasOne("Prorent24.Entity.User", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Prorent24.Entity.Vehicle.VehicleEntity", "Vehicle")
                        .WithMany("CrewMembers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
